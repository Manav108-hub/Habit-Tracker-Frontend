{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/manav/HABBIT-TRACKER/habit-tracker-ts/src/lib/api.ts"],"sourcesContent":["// lib/api.ts - Typed API client with full backend integration\n\nimport type {\n  User,\n  Habit,\n  Badge,\n  AIRecommendation,\n  Progress,\n  UserStats,\n  WeeklyProgress,\n  AdminAnalytics,\n  LoginRequest,\n  SignupRequest,\n  CreateHabitRequest,\n  CheckInRequest,\n  MessageResponse,\n  APIError,\n  CreateFirstAdminRequest,\n  AdminInviteRequest,\n  AdminInviteAccept,\n  AdminInvite,\n} from '@/lib/types';\n\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/api';\n\n// Custom error class\nclass APIException extends Error {\n  constructor(public status: number, message: string) {\n    super(message);\n    this.name = 'APIException';\n  }\n}\n\n// Generic API request handler\nasync function apiRequest<T>(\n  endpoint: string,\n  options: RequestInit = {}\n): Promise<T> {\n  const url = `${API_BASE_URL}${endpoint}`;\n\n  const defaultOptions: RequestInit = {\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n  };\n\n  const config = { ...defaultOptions, ...options };\n\n  try {\n    const response = await fetch(url, config);\n\n    if (response.status === 401) {\n      if (typeof window !== 'undefined') {\n        window.location.href = '/login';\n      }\n      throw new APIException(401, 'Unauthorized');\n    }\n\n    if (!response.ok) {\n      const error: APIError = await response.json();\n      throw new APIException(response.status, error.detail || 'API request failed');\n    }\n\n    return await response.json();\n  } catch (error) {\n    if (error instanceof APIException) {\n      throw error;\n    }\n    console.error('API Error:', error);\n    throw new Error('Network error or server unavailable');\n  }\n}\n\n// Authentication APIs\nexport const authAPI = {\n  signup: (data: SignupRequest): Promise<MessageResponse> =>\n    apiRequest('/signup', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n\n  login: (data: LoginRequest): Promise<MessageResponse> =>\n    apiRequest('/login', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n\n  logout: (): Promise<MessageResponse> =>\n    apiRequest('/logout', {\n      method: 'POST',\n    }),\n\n  createFirstAdmin: (data: CreateFirstAdminRequest): Promise<MessageResponse> =>\n    apiRequest('/create-first-admin', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n\n  getCurrentUser: (): Promise<User> => apiRequest('/me'),\n};\n\n// Habit APIs\nexport const habitAPI = {\n  getAllHabits: (): Promise<Habit[]> => apiRequest('/habits'),\n\n  createHabit: (data: CreateHabitRequest): Promise<Habit> =>\n    apiRequest('/habits', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n\n  checkInHabit: (\n    habitId: number,\n    data: CheckInRequest = {}\n  ): Promise<Habit> =>\n    apiRequest(`/check-in/${habitId}`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n};\n\n// Progress APIs\nexport const progressAPI = {\n  getDailyProgress: (): Promise<Progress> => apiRequest('/progress'),\n\n  getWeeklyProgress: (): Promise<WeeklyProgress> => apiRequest('/progress/weekly'),\n};\n\n// Gamification APIs\nexport const gamificationAPI = {\n  getUserStats: (): Promise<UserStats> => apiRequest('/stats'),\n\n  getBadges: (): Promise<Badge[]> => apiRequest('/badges'),\n};\n\n// AI Recommendation APIs\nexport const recommendationAPI = {\n  generateRecommendation: (\n    recommendationType: 'motivation' | 'improvement' | 'habit_suggestion'\n  ): Promise<AIRecommendation> =>\n    apiRequest('/recommendations/generate', {\n      method: 'POST',\n      body: JSON.stringify({ recommendation_type: recommendationType }),\n    }),\n\n  getRecommendations: (\n    limit: number = 10,\n    unreadOnly: boolean = false\n  ): Promise<AIRecommendation[]> =>\n    apiRequest(`/recommendations?limit=${limit}&unread_only=${unreadOnly}`),\n\n  getDailyRecommendations: (): Promise<AIRecommendation[]> =>\n    apiRequest('/recommendations/daily'),\n\n  markAsRead: (recommendationId: number): Promise<MessageResponse> =>\n    apiRequest(`/recommendations/${recommendationId}/read`, {\n      method: 'PATCH',\n    }),\n};\n\n// Admin APIs\nexport const adminAPI = {\n  getAllUsers: (): Promise<User[]> => apiRequest('/admin/users'),\n\n  createUser: (\n    email: string,\n    password: string,\n    role: string = 'user'\n  ): Promise<MessageResponse> =>\n    apiRequest('/admin/users', {\n      method: 'POST',\n      body: JSON.stringify({ email, password, role }),\n    }),\n\n  getAnalytics: (): Promise<AdminAnalytics> => apiRequest('/admin/analytics'),\n\n  inviteAdmin: (data: AdminInviteRequest): Promise<AdminInvite> =>\n    apiRequest('/admin/invite', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n\n  getInvites: (): Promise<AdminInvite[]> => apiRequest('/admin/invites'),\n\n  revokeInvite: (inviteId: number): Promise<MessageResponse> =>\n    apiRequest(`/admin/invites/${inviteId}`, {\n      method: 'DELETE',\n    }),\n\n  acceptInvite: (data: AdminInviteAccept): Promise<MessageResponse> =>\n    apiRequest('/admin/accept-invite', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n};\n\nexport default {\n  authAPI,\n  habitAPI,\n  progressAPI,\n  gamificationAPI,\n  recommendationAPI,\n  adminAPI,\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///home/manav/HABBIT-TRACKER/habit-tracker-ts/src/app/dashboard/habits/page.tsx"],"sourcesContent":["// src/app/dashboard/habits/page.tsx\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { habitAPI } from '@/lib/api';\nimport type { Habit, CreateHabitRequest } from '@/lib/types';\n\nfunction HabitsPage() {\n  const [habits, setHabits] = useState<Habit[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showForm, setShowForm] = useState(false);\n  const [formData, setFormData] = useState<CreateHabitRequest>({\n    name: '',\n    description: '',\n    category: '',\n    difficulty_level: 1,\n    target_frequency: 'daily',\n  });\n  const [submitting, setSubmitting] = useState(false);\n\n  useEffect(() => {\n    loadHabits();\n  }, []);\n\n  const loadHabits = async () => {\n    try {\n      const data = await habitAPI.getAllHabits();\n      setHabits(data);\n    } catch (error) {\n      console.error('Failed to load habits:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSubmitting(true);\n\n    try {\n      await habitAPI.createHabit(formData);\n      setShowForm(false);\n      setFormData({\n        name: '',\n        description: '',\n        category: '',\n        difficulty_level: 1,\n        target_frequency: 'daily',\n      });\n      loadHabits();\n    } catch (error) {\n      console.error('Failed to create habit:', error);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleCheckIn = async (habitId: number) => {\n  // Disable multiple clicks\n  const button = document.querySelector(`[data-habit-id=\"${habitId}\"]`) as HTMLButtonElement;\n  if (button) {\n    button.disabled = true;\n    button.textContent = 'Checking in...';\n  }\n\n  try {\n    await habitAPI.checkInHabit(habitId);\n    loadHabits();\n  } catch (error) {\n    console.error('Failed to check in:', error);\n    alert('Failed to check in habit');\n  } finally {\n    if (button) {\n      button.disabled = false;\n      button.textContent = 'Check In';\n    }\n  }\n};\n\n  if (loading) {\n    return (\n      <div className=\"flex-center\" style={{ minHeight: '50vh' }}>\n        <div className=\"spinner\" style={{ width: '2rem', height: '2rem' }}></div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"dashboard-header flex-between\">\n        <div>\n          <h1 className=\"dashboard-title\">My Habits</h1>\n          <p className=\"dashboard-subtitle\">Create and track your daily habits</p>\n        </div>\n        <button \n          onClick={() => setShowForm(!showForm)} \n          className=\"btn btn-primary\"\n        >\n          {showForm ? 'Cancel' : '+ Create Habit'}\n        </button>\n      </div>\n\n      {showForm && (\n        <div className=\"card mb-4\">\n          <div className=\"card-header\">\n            <h2 className=\"card-title\">Create New Habit</h2>\n            <p className=\"card-description\">Fill in the details to create a new habit</p>\n          </div>\n          <div className=\"card-content\">\n            <form onSubmit={handleSubmit}>\n              <div className=\"form-group\">\n                <label htmlFor=\"name\">Habit Name *</label>\n                <input\n                  id=\"name\"\n                  type=\"text\"\n                  placeholder=\"e.g., Morning Exercise\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  required\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"description\">Description</label>\n                <textarea\n                  id=\"description\"\n                  placeholder=\"Describe your habit...\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"grid\" style={{ gridTemplateColumns: 'repeat(2, 1fr)', gap: '1rem' }}>\n                <div className=\"form-group\">\n                  <label htmlFor=\"category\">Category</label>\n                  <input\n                    id=\"category\"\n                    type=\"text\"\n                    placeholder=\"e.g., Health, Fitness\"\n                    value={formData.category}\n                    onChange={(e) => setFormData({ ...formData, category: e.target.value })}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <label htmlFor=\"frequency\">Frequency</label>\n                  <select\n                    id=\"frequency\"\n                    value={formData.target_frequency}\n                    onChange={(e) => setFormData({ ...formData, target_frequency: e.target.value })}\n                  >\n                    <option value=\"daily\">Daily</option>\n                    <option value=\"weekly\">Weekly</option>\n                    <option value=\"monthly\">Monthly</option>\n                  </select>\n                </div>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"difficulty\">Difficulty Level: {formData.difficulty_level}</label>\n                <input\n                  id=\"difficulty\"\n                  type=\"range\"\n                  min=\"1\"\n                  max=\"5\"\n                  value={formData.difficulty_level}\n                  onChange={(e) => setFormData({ ...formData, difficulty_level: parseInt(e.target.value) })}\n                  style={{ width: '100%' }}\n                />\n                <div className=\"flex-between text-small text-muted\">\n                  <span>Easy</span>\n                  <span>Hard</span>\n                </div>\n              </div>\n\n              <button type=\"submit\" className=\"btn btn-primary btn-full\" disabled={submitting}>\n                {submitting ? (\n                  <>\n                    <span className=\"spinner\"></span>\n                    Creating...\n                  </>\n                ) : (\n                  'Create Habit'\n                )}\n              </button>\n            </form>\n          </div>\n        </div>\n      )}\n\n      {habits.length === 0 ? (\n        <div className=\"card\">\n          <div className=\"empty-state\">\n            <div className=\"empty-state-icon\">\n              <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                <polyline points=\"9 11 12 14 22 4\"/>\n                <path d=\"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11\"/>\n              </svg>\n            </div>\n            <h3 className=\"empty-state-title\">No habits yet</h3>\n            <p className=\"empty-state-description\">\n              Create your first habit to start tracking your progress\n            </p>\n            <button onClick={() => setShowForm(true)} className=\"btn btn-primary\">\n              Create Your First Habit\n            </button>\n          </div>\n        </div>\n      ) : (\n        <div className=\"habit-list\">\n          {habits.map((habit) => (\n            <div key={habit.id} className=\"habit-card\">\n              <div className=\"habit-card-header\">\n                <div className=\"habit-card-info\">\n                  <h3 className=\"habit-card-title\">{habit.name}</h3>\n                  {habit.description && (\n                    <p className=\"habit-card-description\">{habit.description}</p>\n                  )}\n                  <div className=\"habit-card-meta\">\n                    {habit.category && (\n                      <div className=\"habit-meta-item\">\n                        <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                          <path d=\"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z\"/>\n                          <line x1=\"7\" y1=\"7\" x2=\"7.01\" y2=\"7\"/>\n                        </svg>\n                        <span>{habit.category}</span>\n                      </div>\n                    )}\n                    <div className=\"habit-meta-item\">\n                      <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                        <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"/>\n                        <polyline points=\"22 4 12 14.01 9 11.01\"/>\n                      </svg>\n                      <span>{habit.check_ins.length} check-ins</span>\n                    </div>\n                    <div className=\"habit-meta-item\">\n                      <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                        <polygon points=\"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\"/>\n                      </svg>\n                      <span>{habit.points_per_completion} points</span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"habit-card-actions\" style={{ flexDirection: 'column', alignItems: 'end', gap: '0.5rem' }}>\n                  {habit.current_streak > 0 && (\n                    <div className=\"habit-streak\">\n                      <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                        <path d=\"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z\"/>\n                      </svg>\n                      <span>{habit.current_streak} day streak</span>\n                    </div>\n                  )}\n                  <button \n                    onClick={() => handleCheckIn(habit.id)}\n                    className=\"btn btn-primary\"\n                  >\n                    Check In\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default HabitsPage;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 940, "column": 0}, "map": {"version":3,"sources":["file:///home/manav/HABBIT-TRACKER/habit-tracker-ts/node_modules/%40swc/helpers/esm/_define_property.js"],"sourcesContent":["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n"],"names":[],"mappings":";;;;AAAA,SAAS,iBAAiB,GAAG,EAAE,GAAG,EAAE,KAAK;IACrC,IAAI,OAAO,KAAK;QACZ,OAAO,cAAc,CAAC,KAAK,KAAK;YAAE,OAAO;YAAO,YAAY;YAAM,cAAc;YAAM,UAAU;QAAK;IACzG,OAAO,GAAG,CAAC,IAAI,GAAG;IAElB,OAAO;AACX","ignoreList":[0],"debugId":null}}]
}